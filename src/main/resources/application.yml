server.port: 8080


######kafka
kafka.topic.name: data-topic
kafka.consumer.group-id: group_of_consumer
spring.kafka.bootstrap-servers: kafka-url:9092
spring.kafka.consumer.auto-offset-reset: earliest
spring.kafka.consumer.properties.spring.json.trusted.packages: "*"

#spring.kafka.properties.sasl.mechanism: SCRAM-SHA-512 
#spring.kafka.properties.security.protocol: SASL_SSL
#spring.kafka.properties.ssl.truststore.location: /truststore/ca.p12
#spring.kafka.properties.sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="@@username@@" password="@@password@@";
#spring.kafka.properties.ssl.truststore.password: @@JKS_PASSWORD@@


spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # Deserializer class for keys.
spring.kafka.consumer.value-deserializer: io.apicurio.registry.utils.serde.AvroKafkaDeserializer # Deserializer class for values.        
########################## 
spring.kafka.consumer.properties.apicurio.registry.use-specific-avro-reader: true
spring.kafka.consumer.properties.apicurio.registry.url:  http://registry-url:8080/api
spring.kafka.consumer.properties.apicurio.registry.artifact-id: io.apicurio.registry.utils.serde.strategy.TopicIdStrategy
spring.kafka.consumer.properties.apicurio.registry.global-id: io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy


######mysql

spring.jpa.hibernate.ddl-auto: update
spring.datasource.url: jdbc:mysql://localhost:3306/olivier
spring.datasource.username: root
spring.datasource.password: root
spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect


